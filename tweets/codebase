
MODELS
from django.db import models
from django.conf import settings
import random

User = settings.AUTH_USER_MODEL

class TweetLikes(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    tweet = models.ForeignKey('Tweet', on_delete= models.CASCADE)
    time_stamp = models.DateTimeField(auto_now_add=True)

# Create your models here.
class Tweet(models.Model):
    parent = models.ForeignKey("self", null=True, on_delete=models.SET_NULL)
    content = models.TextField(blank=True, null=True)
    image = models.FileField(upload_to='images/', blank=True, null=True)
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    likes = models.ManyToManyField(User, related_name='tweet_user', blank=True, through=TweetLikes)
    time_stamp = models.DateTimeField(auto_now_add=True)
   
    
    class Meta:
        ordering = ['-id']
    
    def __getitem__(self,key):
        if key == 'content':
            return self.content
    
    def __setitem__(self,key,data):
        if key == 'content':
            self.content = data
            self.save()
    
    def serialize(self):
        return {
            'id': self.id,
            'content': self.content,
            'likes': random.randint(0,3000)
        }
            
        
  URLS
from django.urls import path, include 
from .views import TweetsRepoView, HomeView, TweetCreateView,TweetsDetailView,TweetDeleteView, TweetActionView

app_name = 'tweets'

urlpatterns = [
    path('tweets', TweetsRepoView.as_view()),
    path('', HomeView.as_view(), name='all'),
    path('create-form', TweetCreateView.as_view()),
    path('tweets/<int:tweet_id>', TweetsDetailView.as_view()),
    path('tweets/<int:tweet_id>/delete', TweetDeleteView.as_view()),
    path('tweets/action', TweetActionView.as_view()),
    ]
    

SERIALIZERS
from rest_framework import serializers
from .models import Tweet
from django.conf import settings

max_len = settings.MAX_TWEET_LENGTH
tweet_action_options = settings.TWEET_ACTION_OPTIONS

class TweetSerializer(serializers.ModelSerializer):
    likes = serializers.SerializerMethodField(read_only=True)
    class Meta:
        model = Tweet
        fields = ['id','content','likes']
    
    def get_likes(self, obj):
        return obj.likes.count()
    
    def validate_content(self, value):
        if len(value) > max_len:
            raise serializers.ValidationError('Tweet exceeded '+ str(max_len)+ ' characters')
        return value
        
        

class TweetActionSerializer(serializers.Serializer):
    id = serializers.IntegerField()
    action = serializers.CharField()
    content = serializers.CharField(allow_blank=True, required=False)
    
    def validate_action(self, value):
        value = value.lower().strip()
        if not value in tweet_action_options:
            raise serializers.ValidationError('Not a valid option')
        else:
            return value
    
 HOME.HTML
 {% extends 'base.html' %}
{% block content %}
<div class='row text-center'>
    <div class='col'>
        <h1>Twitter Clone</h1>
    </div>
</div>

<div class='row text-center mb-4'>
    <div class='col-md-4 mx-auto col-10'>
        <form class='form' id='tweet-create-form' method='POST' action='create-form'>
            {% csrf_token %}
            <div class='d-none alert alert-danger' id='tweet-create-form-error'></div>
            <input type='hidden' value='/' name='next'/>
            <textarea class='form-control' required='required' name='content' placeholder='Tweet here...'></textarea>
            <button type='submit' class='btn btn-primary'>Tweet</button>
        </form>
    </div>
</div>

<div class='row'id='tweet'>
    Loading...
</div>

<script>
   function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            // Does this cookie string begin with the name we want?
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
   }
    
    const loadTweets = (tweetElements) => {
        const xhr = new XMLHttpRequest();
        const method = 'GET';
        const url = 'tweets';
        const responseType = 'json';
        xhr.responseType = responseType;
        xhr.open(method, url);
        xhr.onload = function () {
            const serverResponse = xhr.response;
            let tweets = serverResponse;
            let i;
            let tweetStr = '';
            for (i=0; i<tweets.length; i++){
                const currentTweet = tweets[i];
                tweetStr += formattedTweets(currentTweet);
                
            }
            tweetElements.innerHTML = tweetStr;
    };
    xhr.send();
    }
    const handleTweetFormError = (msg, display) => {
        let tweetFormError = document.getElementById('tweet-create-form-error');
        if (display==true){
            tweetFormError.setAttribute('class','d block alert alert-danger');
            tweetFormError.innerHTML = msg;
        } else {
            tweetFormError.setAttribute('class', 'd-none alert alert danger');
        }
    }
    
    const handleFormSubmit = (event) => {
        event.preventDefault();
        const myForm = event.target;
        const myFormData = new FormData(myForm);
        const method = myForm.getAttribute('method');
        const url = myForm.getAttribute('action');
        const responseType = 'json';
        const xhr = new XMLHttpRequest();
        xhr.responseType = responseType;
        xhr.open(method, url);
        xhr.setRequestHeader("HTTP_X_REQUESTED_WITH","XMLHttpRequest");
        xhr.setRequestHeader("X-Requested-With","XMLHttpRequest");
        xhr.onload = function () {
            if (xhr.status === 201) {
            const tweetFromServerResponse = xhr.response;
            handleTweetFormError('',false);
            const tweetFromServerResponseElement = formattedTweets(tweetFromServerResponse);
            const currentHtml  = tweetElementsContainer.innerHTML;
            tweetElementsContainer.innerHTML = tweetFromServerResponseElement + currentHtml;
            myForm.reset();
            } 
            else if (xhr.status === 400){
                const errorMsg = xhr.response;
                const errorMsgContent = errorMsg.content
                if (errorMsgContent){
                    const errorMsgContentReason = errorMsgContent[0];
                    handleTweetFormError(errorMsgContentReason, true);
                    console.log(errorMsgContentReason);
                }
            }else if (xhr.status === 401 || xhr.status == 403){
                alert('Not logged in')
                window.location.href = '/login';
            }             
        };
        xhr.send(myFormData);
    };
    
    const tweetElementsContainer = document.getElementById('tweet');
    const tweetFormElement = document.getElementById('tweet-create-form');
    tweetFormElement.addEventListener('submit', handleFormSubmit);
    
    
    const formattedTweets = (tweets) => {
        let formatted = "<div class= 'col-12 col-md-10 mx-auto border py-3 mb-4 tweet' id="
        +tweets.id+"><p>"+tweets.content+"</p><div class='btn-group'>"+LikeBtn(tweets)+" "+unLikeBtn(tweets)+""+ReTweeBtn(tweets)+"</div></div>";
        return formatted;
    };
    
    const LikeBtn = (tweets) => {
        let button = "<button class='btn btn-primary btn-sm' onclick=handleTweetAction("+tweets.id+","+tweets.likes+",'like')>"+tweets.likes+" Likes</button>";
        return button;
    };
    
    const unLikeBtn = (tweets) => {
        let button = "<button class='btn btn-outline-primary btn-sm' onclick=handleTweetAction("+tweets.id+","+tweets.likes+",'unlike')>Unlike</button>";
        return button;
    };
    
    const ReTweeBtn = (tweets) => {
        let button = "<button class='btn btn-outline-success btn-sm' onclick=handleTweetAction("+tweets.id+","+tweets.likes+",'retweet')>Retweet</button>";
        return button;
    };
    
    const handleTweetAction = (id, count, action) => {
        console.log(id,count);
        const url = 'tweets/action';
        const method = 'POST';
        const data = JSON.stringify({
            id: id,
            action:action
        })
        const csrf_token = getCookie('csrftoken')
        const xhr = new XMLHttpRequest()
        xhr.open(method, url)
        xhr.setRequestHeader('Content-Type', 'application/json')
        xhr.setRequestHeader("HTTP_X_REQUESTED_WITH","XMLHttpRequest");
        xhr.setRequestHeader("X-Requested-With","XMLHttpRequest");
        xhr.setRequestHeader('X-CSRFToken', csrf_token)
        xhr.onload = function (){
            loadTweets(tweetElementsContainer);
            
        }
        xhr.send(data);
    };
    
    loadTweets(tweetElementsContainer);
    
    
</script>

{% endblock %}


VIEWS
from django.views import View
from .models import Tweet
from django.shortcuts import render, redirect 
from django.urls import reverse_lazy
from django.http import JsonResponse
import random
from .forms import TweetCreateForm
from django.conf import settings
from .serializers import TweetSerializer, TweetActionSerializer
from rest_framework.response import Response 
from rest_framework.decorators import api_view
from django.utils.decorators import method_decorator
from rest_framework.views import APIView
from rest_framework.generics import ListAPIView
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import SessionAuthentication


class TweetsRepoViewPure(View):
    '''REST API '''
    status = 200
    def get(self, request, *args, **kwargs):
        qs = Tweet.objects.all()
        tweets = [tweet.serialize() for tweet in qs]
        data = {
            'response': tweets
        }
        return JsonResponse(data, status=self.status)
        
class HomeView(View):
    template = 'pages/home.html'
    def get(self, request, *args, **kwargs):
        return render(request, self.template, context={})
        
class TweetCreateViewPure(View):
    template = 'components/form.html'
    success_url = reverse_lazy('tweets:all')
    def get(self, request, *args, **kwargs):
        print(request.user)
        form = TweetCreateForm()
        ctx = {'form':form}
        return render(request, self.template, context=ctx)
    
    def post(self, request, *args, **kwargs):
        user = request.user
        is_ajax = request.META.get('HTTP_X_REQUESTED_WITH') == 'XMLHttpRequest'
        if not request.user.is_authenticated:
            user = None
            if is_ajax:
                return JsonResponse({}, status=401)
            return redirect(settings.LOGIN_URL)
        else:
            form = TweetCreateForm(request.POST)
            if form.is_valid():
                obj = form.save(commit=False)
                obj.user = user
                obj.save()
                status_code = 201
                if is_ajax:
                    return JsonResponse(obj.serialize(), status=status_code)
                else:
                    ctx = {'form':obj}
                    return redirect(self.success_url, status=status_code)
            else:
                status_code = 400
                if is_ajax:
                    return JsonResponse(obj.errors, status=status_code)
                else:
                    ctx = {'form':obj}
                    return render(request, self.template, context=ctx, status=status_code)
            

class TweetCreateView(APIView):
    authentication_classes = [SessionAuthentication]
    permission_classes = [IsAuthenticated]
    def post(self, request, *args, **kwargs):
        serializer = TweetSerializer(data=request.POST)
        if serializer.is_valid(raise_exception=True):
            serializer.save(user=request.user)
            return Response(serializer.data, status=201)
        return Response({}, status=400)

class TweetsRepoView(APIView):
    def get(self, request, *args, **kwargs):
        qs = Tweet.objects.all()
        serializer = TweetSerializer(qs, many=True)
        return Response(serializer.data)

class TweetsDetailView(APIView):
    def get(self, request, tweet_id, *args, **kwargs):
        qs = Tweet.objects.filter(id=tweet_id)
        if not qs.exists():
            return Response({},status=404)
        else:
            tweet = qs.first()
            serializer = TweetSerializer(tweet)
            return Response(serializer.data, status=200)
            
class TweetDeleteView(APIView):
    permission_classes = [IsAuthenticated]
    def post(self, request, tweet_id, *args, **kwargs):
        qs = Tweet.objects.filter(id=tweet_id)
        if not qs.exists():
            return Response({}, status=404)
        qs = qs.filter(user=request.user)
        if not qs.exists():
            return Response({'message':"You don't have permission to delete this tweet"}, status=401)
        else:
            qs.delete()
            return Response({'message':"Tweet deleted successfully"}, status=200)


class TweetActionView(APIView):
    permission_classes = [IsAuthenticated]
    '''
    id is required
    Action options are: like, unlike, retweet
    
    '''
    
    def post(self, request, *args, **kwargs):
        print(request.POST, request.data)
        serializer = TweetActionSerializer(data=request.data)
        if serializer.is_valid(raise_exception=True):
            data = serializer.validated_data
            tweet_id = data.get('id')
            action = data.get('action')
            content = data.get('content')
            qs = Tweet.objects.filter(id=tweet_id)
            if not qs.exists():
                return Response({}, status= 404)
            obj = qs.first()
            if action == 'like':
                obj.likes.add(request.user)
                serializer = TweetSerializer(obj)
                return Response(serializer.data, status=200)
            elif action == 'unlike':
                obj.likes.remove(request.user)
            elif action == 'retweet':
                new_tweet = Tweet.objects.create(user=request.user, parent=obj,content=content)
                serializer = TweetSerializer(new_tweet)
                return Response(serializer.data, status=200)
        return Response({}, status=200)
    
    FORMS
    from django.forms import ModelForm, ValidationError
from .models import Tweet
from django.conf import settings

max_len = settings.MAX_TWEET_LENGTH

class TweetCreateForm(ModelForm):
    class Meta:
        model = Tweet
        fields = ['content']
    
    def clean_content(self):
        content = self.cleaned_data.get('content')
        if len(content) > max_len:
            raise ValidationError('Tweet exceeded '+ str(max_len)+ ' characters')
        else:
            return content

BASE HTML
<!doctype html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">

    <title>Twitter Clone</title>
  </head>
  <body>
    {% include 'components/navbar.html'%}
    {% block content %}
    
    {% endblock %}

    <!-- Optional JavaScript; choose one of the two! -->

    <!-- Option 1: Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>

    <!-- Option 2: Separate Popper and Bootstrap JS -->
    <!--
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.2/dist/umd/popper.min.js" integrity="sha384-7+zCNj/IqJ95wo16oMtfsKbZ9ccEh31eOz1HGyDuCQ6wgnyJNSYdrPa03rtR1zdB" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js" integrity="sha384-QJHtvGhmr9XOIpI6YVutG+2QOK9T+ZnN4kzFN1RtK3zEFEIsxhlmWl5/YESvpZ13" crossorigin="anonymous"></script>
    -->
  </body>
</html>

FORM.HTML
<form action='' method='POST'>
    {% csrf_token %}
    {{form.as_p}}
    <button type='submit' class='btn btn-primary'>Submit</button>
</form>

NAVBAR.HTML
<nav class="navbar navbar-expand-lg navbar-light bg-light">
  <div class="container-fluid">
    <a class="navbar-brand" href="/">Aurora</a>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse d-none" id="navbarSupportedContent">
      <ul class="navbar-nav me-auto mb-2 mb-lg-0 d-none">
        <li class="nav-item">
          <a class="nav-link active" aria-current="page" href="#">Home</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="#">Link</a>
        </li>
        <li class="nav-item dropdown">
          <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
            Dropdown
          </a>
          <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
            <li><a class="dropdown-item" href="#">Action</a></li>
            <li><a class="dropdown-item" href="#">Another action</a></li>
            <li><hr class="dropdown-divider"></li>
            <li><a class="dropdown-item" href="#">Something else here</a></li>
          </ul>
        </li>
        <li class="nav-item">
          <a class="nav-link disabled">Disabled</a>
        </li>
      </ul>
      <form class="d-flex d-none">
        <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
        <button class="btn btn-outline-success" type="submit">Search</button>
      </form>
    </div>
  </div>
</nav>

ADMIN.PY
from django.contrib import admin
from .models import Tweet, TweetLikes

# Register your models here.
class TweetLikeAdmin(admin.TabularInline):
    model = TweetLikes
        
class TweetAdminSearch(admin.ModelAdmin):
    inlines = [TweetLikeAdmin]
    list_display = ['__str__', 'user']
    search_fields = ['user__username', 'user__email']
    class Meta:
        model = Tweet


        

admin.site.register(Tweet, TweetAdminSearch)

            

    
        

        
        
        
    
    
    
